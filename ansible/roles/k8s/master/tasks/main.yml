---
- name: Pre-flight checks
  include_tasks: preflight_checks.yml

- name: Install Kubernetes components
  block:
    - name: Install Kubectl
      apt:
        name: kubectl={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Hold kubectl packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubectl   

- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address={{ api_server_address }}
  register: kubeadm_init_result
  when: kubectl_get_nodes.rc != 0
  ignore_errors: true

- name: Debugging the Result
  ansible.builtin.debug:
    msg: "{{ kubeadm_init_result }}"

- name: Execute these if kubeadm is correctly started
  block:
    - name: Export the config
      ansible.builtin.shell: "export KUBECONFIG=/etc/kubernetes/admin.conf"

    - name: Create the .kube directory in user's home
      file: 
        path: '{{ ansible_env.HOME }}/.kube'
        state: directory
        mode: '0755'

    - name: Copy the kubeadm admin config to user's .kube directory
      command: cp /etc/kubernetes/admin.conf {{ ansible_env.HOME }}/.kube/config

    - name: Set proper ownership for .kube/config
      file:
        path: '{{ ansible_env.HOME }}/.kube/config'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0600'

    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: '{{ ansible_env.HOME }}/.bashrc'
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
        state: present

    - name: Check the cluster status 
      ansible.builtin.command: "kubectl get nodes"
      register: cluster_initial
