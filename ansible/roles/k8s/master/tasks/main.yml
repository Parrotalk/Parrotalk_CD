---
- name: Pre-flight checks
  include_tasks: preflight_checks.yml

# - name: Install Kubernetes components
#   block:
#     - name: Install Kubectl
#       apt:
#         name: kubectl={{ kubernetes_version }}.*
#         state: present
#         update_cache: true

#     - name: Hold kubectl packages
#       dpkg_selections:
#         name: "{{ item }}"
#         selection: hold
#       loop:
#         - kubectl

# - name: Reset Kubernetes cluster (if already initialized)
#   block:
#     - name: Reset kubeadm
#       command: kubeadm reset -f
#     - name: Remove Kubernetes configuration files
#       file:
#         path: "{{ item }}"
#         state: absent
#       loop:
#         - /etc/kubernetes/manifests
#         - /etc/kubernetes/pki
#         - /var/lib/etcd
#         - /var/lib/kubelet
#         - /etc/cni/net.d
#     - name: Clean iptables rules
#       command: iptables -F
#     - name: Clean IPVS rules
#       command: ipvsadm --clear
#     - name: Restart containerd service after reset
#       systemd:
#         name: containerd
#         state: restarted
#   when: 
#     - "'The cluster has no token available' not in kubeadm_token_check.stdout"

## Master node specific tasks

- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address={{ api_server_address }}
  register: kubeadm_init_result
  ignore_errors: true

- name: Debugging the Result
  ansible.builtin.debug:
    msg: "{{ kubeadm_init_result }}"

- name: Execute these if kubeadm is correctly started
  block:
    - name: Export the config
      ansible.builtin.shell: "export KUBECONFIG=/etc/kubernetes/admin.conf"

    - name: Create the .kube directory in user's home
      file: 
        path: '{{ ansible_env.HOME }}/.kube'
        state: directory
        mode: '0755'

    - name: Copy the kubeadm admin config to user's .kube directory
      command: cp /etc/kubernetes/admin.conf {{ ansible_env.HOME }}/.kube/config

    - name: Set proper ownership for .kube/config
      file:
        path: '{{ ansible_env.HOME }}/.kube/config'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0600'

    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: '{{ ansible_env.HOME }}/.bashrc'
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'
        state: present

    - name: Check the cluster status 
      ansible.builtin.command: "kubectl get nodes"
      register: cluster_initial

    - name: Copy the join command in a remote file
      ansible.builtin.copy:
        content: |
          "{{ kubeadm_init_result.stdout_lines }}"
        dest: "/tmp/join-command"

    - name: Cat the kubeadm join to get the single line
      ansible.builtin.shell: >
        cat /tmp/join-command | 
        awk -F ',' '{print $(NF-1) $(NF)}' |
        sed "s/\\\\' '\\\t//g" | 
        sed "s/\\\--discovery/--discovery/" |  
        sed "s/'\]\"//" | sed "s/'//"
      register: one_line_command

    - name: Rewriting the join command  
      ansible.builtin.copy:
        content: "{{ one_line_command.stdout }}"
        dest: "/tmp/join-command"

    # - name: Get the join command in main node
    #   ansible.builtin.fetch:
    #     src: "/tmp/join-command"
    #     dest: "./join-command"
    #     flat: yes

    - name: Displaying the Kubeadm Init Result
      ansible.builtin.debug:
        msg: "{{ kubeadm_init_result }}"

    - name: Displaying the Cluster status
      ansible.builtin.debug:
        msg: "{{ cluster_initial.stdout }}"