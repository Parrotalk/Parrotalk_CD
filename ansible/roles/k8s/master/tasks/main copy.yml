---
- name: Pre-flight checks
  include_tasks: preflight_checks.yml

- name: Install Kubernetes components
  block:
    - name: Install Kubectl
      apt:
        name: kubectl={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Hold kubectl packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubectl

# - name: Reset Kubernetes cluster (if already initialized)
#   block:
#     - name: Reset kubeadm
#       command: kubeadm reset -f
#     - name: Remove Kubernetes configuration files
#       file:
#         path: "{{ item }}"
#         state: absent
#       loop:
#         - /etc/kubernetes/manifests
#         - /etc/kubernetes/pki
#         - /var/lib/etcd
#         - /var/lib/kubelet
#         - /etc/cni/net.d
#     - name: Clean iptables rules
#       command: iptables -F
#     - name: Clean IPVS rules
#       command: ipvsadm --clear
#     - name: Restart containerd service after reset
#       systemd:
#         name: containerd
#         state: restarted
#   when: 
#     - "'The cluster has no token available' not in kubeadm_token_check.stdout"

- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address={{ api_server_address }}
  register: kubeadm_init_result

- name: Print HOME environment variable
  debug:
    msg: "HOME directory is: {{ ansible_env.HOME }}"

- name: Create .kube directory if it doesn't exist
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Check if admin.conf exists
  stat:
    path: /etc/kubernetes/admin.conf
  register: admin_conf_check

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: admin_conf_check.stat.exists

- name: Get join command
  command: kubeadm token create --print-join-command
  register: join_command_raw
  when: admin_conf_check.stat.exists

- name: Save join command to file
  copy:
    content: "{{ join_command_raw.stdout }}"
    dest: "/tmp/kubernetes_join_command"
    mode: '0644'
  when: admin_conf_check.stat.exists

- name: Display the join command
  debug:
    var: join_command_raw.stdout
  when: admin_conf_check.stat.exists