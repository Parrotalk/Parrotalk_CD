---
- name: Verify Ubuntu 24.04
  fail:
    msg: 'OS should be Ubuntu 24.04, not {{ ansible_distribution }} {{ ansible_distribution_version }}'
  when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '24.04'

- name: Update and upgrade system packages
  apt:
    update_cache: yes
    upgrade: full

- name: Disable and remove swap
  block:
    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Remove swap entry from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*[^#]\s*\S+\s+none\s+swap\s+'
        state: absent

    - name: Create swapoff systemd service
      copy:
        dest: /etc/systemd/system/disable-swap.service
        content: |
          [Unit]
          Description=Disable swap
          DefaultDependencies=no
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/sbin/swapoff -a
          RemainAfterExit=yes
          
          [Install]
          WantedBy=multi-user.target

- name: Enable disable-swap service
  systemd:
    name: disable-swap
    state: started
    enabled: yes
    daemon_reload: yes

- name: Install common system utilities
  apt:
    name:
      - vim
      - git
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - socat
      - ipvsadm
    state: present
    update_cache: yes

- name: Configure kernel modules for Containerd
  block:
    - name: Create Containerd modules file
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    - name: Restart systemd-modules-load service
      systemd:
        name: systemd-modules-load
        state: restarted
- name: Configure kernel parameters for Kubernetes
  block:
    - name: Create Kubernetes sysctl config file
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Apply sysctl parameters
      command: sysctl --system

- name: Add Docker repository
  block:
    - name: Add Docker GPG apt key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Docker apt repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

- name: Add Kubernetes repository
  block:
    - name: Add Kubernetes GPG apt key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /'
        state: present
        update_cache: yes

- name: Install and configure Containerd
  block:
    - name: Install Containerd package
      apt:
        name: containerd.io
        state: present

    - name: Create Containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate default Containerd config if not present
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Configure systemd cgroup driver for Containerd
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        mode: '0644'

- name: Install Kubernetes components
  block:
    - name: Install kubelet
      apt:
        name: kubelet={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Install kubeadm
      apt:
        name: kubeadm={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Hold kubelet and kubeadm packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm

- name: Configure Kubernetes services
  block:
    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Ensure bridge-nf-call-iptables is set to 1
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present

    - name: Ensure ip_forward is set to 1
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

- name: Restart essential services for Kubernetes
  block:
    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted

