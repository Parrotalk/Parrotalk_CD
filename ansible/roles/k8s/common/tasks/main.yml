- name: Set architecture variable for Docker
  set_fact:
    system_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"

- name: Update and Upgrade the apt packages before proceeding
  apt:
    update_cache: true
    upgrade: full

- name: Install common system utilities
  apt:
    name:
      - vim
      - git
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - socat
      - ipvsadm
    state: present
    update_cache: yes 

- name: Block to manage Swap space
  block:
    - name: Check for swap to be on
      ansible.builtin.shell: "swapon -s | wc -l"
      register: number_of_swap
      changed_when: false

    - name: Turning off swaps
      ansible.builtin.shell: "swapoff -a"
      when: number_of_swap.stdout != 0

    - name: Check for swap in /etc/fstab
      ansible.builtin.shell: "cat /etc/fstab | awk '{print $3}' | grep swap | wc -l"
      register: number_in_fstab
      changed_when: false

    - name: Changing entries in fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '.*swap.*'
        line: '# \g<0>'
      when: number_in_fstab.stdout != '0'

- name: Configure kernel modules for Containerd
  block:
    - name: Create Containerd modules file
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    - name: Restart systemd-modules-load service
      systemd:
        name: systemd-modules-load
        state: restarted

- name: Configure kernel parameters for Kubernetes
  block:
    - name: Create Kubernetes sysctl config file
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Apply sysctl parameters
      command: sysctl --system

- name: Add the apt repository of containerd and Install containerd runtime
  block:
    - name: Check if keyring is already present
      ansible.builtin.stat:
        path: /usr/share/keyrings/docker.gpg
      register: containerd_keyring_present

    - name: Adding the Containerd repo key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker.gpg 
      when: containerd_keyring_present.stat.exists != 'true'

    - name: Retreive dpkg architecture 
      ansible.builtin.shell: "echo $(dpkg --print-architecture)"
      register: dpkg_architecture
      changed_when: false
      ignore_errors: true

    - name: The containerd repo
      ansible.builtin.shell: "echo 'deb [arch={{ dpkg_architecture.stdout }} signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable' | tee /etc/apt/sources.list.d/docker.list > /dev/null"
      changed_when: false
      ignore_errors: true

    - name: Installing containerd runtime
      ansible.builtin.apt:
        name: containerd
        state: present

- name: Setting up the containerd runtime configurations
  block:
    - name: Make the directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory

    - name: Generate CNI configurations
      ansible.builtin.shell: "containerd config default > /etc/containerd/config.toml"
    
    - name: Change the systemd driver of containerd
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

- name: Reloading the containerd service
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: true

- name: Install dependent packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - conntrack
    state: present

- name: Make the Keyring directory
  ansible.builtin.file:
    path: /usr/share/keyrings
    state: directory
    mode: 755

- name: Add the Apt repository /usr/share/keyrings/kubernetes-archive-keyring.gpg
  block:
    - name: Check if the keyring file is already present
      ansible.builtin.stat:
        path: /usr/share/keyrings/kubernetes-archive-keyring.gpg
      register: gpg_key_present

    - name: Add apt key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
      when: gpg_key_present.stat.exists != 'true'

- name: Add the Kubernetes Repository
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /
    state: present
    filename: kubernetes

- name: Perform an apt update
  ansible.builtin.apt:
    update_cache: yes

- name: Install Kubernetes components
  block:
    - name: Install kubelet
      apt:
        name: kubelet={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Install kubeadm
      apt:
        name: kubeadm={{ kubernetes_version }}.*
        state: present
        update_cache: true

    - name: Hold kubelet and kubeadm packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm

- name: Check if the containerd service is unmasked
  ansible.builtin.shell: "systemctl is-enabled containerd"
  register: masked_containerd
  changed_when: false

- name: Unmask the containerd, if masked 
  ansible.builtin.shell: "systemctl unmask containerd"
  when: masked_containerd.stdout == 'masked'

- name: Check if the kubelet service is unmasked
  ansible.builtin.shell: "systemctl is-enabled kubelet"
  register: masked_kubelet
  changed_when: false

- name: Unmask the kubelet, if masked 
  ansible.builtin.shell: "systemctl unmask kubelet"
  when: masked_kubelet.stdout == 'masked'  

- name: Making sure kubelet service is stopped
  ansible.builtin.service:
    name: kubelet
    state: stopped
    enabled: true

- name: Making sure containerd service is started
  ansible.builtin.service:
    name: containerd
    state: started
